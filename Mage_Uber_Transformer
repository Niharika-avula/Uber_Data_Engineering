import pandas as pd
if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(df, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here
    df['tpep_pickup_datetime']=pd.to_datetime(df['tpep_pickup_datetime'])
    df['tpep_dropoff_datetime']=pd.to_datetime(df['tpep_dropoff_datetime'])

    df = df.drop_duplicates().reset_index(drop=True)
    df['trip_id'] = df.index
    
    dim_datetime = df[['tpep_pickup_datetime','tpep_dropoff_datetime']].reset_index(drop=True)
    dim_datetime['tpep_pickup_datetime'] = dim_datetime['tpep_pickup_datetime']
    dim_datetime['pickup_hour'] = dim_datetime['tpep_pickup_datetime'].dt.hour
    dim_datetime['pickup_day'] = dim_datetime['tpep_pickup_datetime'].dt.day
    dim_datetime['pickup_week'] = dim_datetime['tpep_pickup_datetime'].dt.isocalendar().week
    dim_datetime['pickup_month'] = dim_datetime['tpep_pickup_datetime'].dt.month
    dim_datetime['pickup_year'] = dim_datetime['tpep_pickup_datetime'].dt.year
    dim_datetime['pickup_weekday'] = dim_datetime['tpep_pickup_datetime'].dt.weekday

    dim_datetime['tpep_dropoff_datetime'] = dim_datetime['tpep_dropoff_datetime']
    dim_datetime['dropoff_hour'] = dim_datetime['tpep_dropoff_datetime'].dt.hour
    dim_datetime['dropoff_day'] = dim_datetime['tpep_dropoff_datetime'].dt.day
    dim_datetime['dropoff_week'] = dim_datetime['tpep_dropoff_datetime'].dt.isocalendar().week
    dim_datetime['dropoff_month'] = dim_datetime['tpep_dropoff_datetime'].dt.month
    dim_datetime['dropoff_year'] = dim_datetime['tpep_dropoff_datetime'].dt.year
    dim_datetime['dropoff_weekday'] = dim_datetime['tpep_dropoff_datetime'].dt.weekday

    dim_datetime['datetime_id'] = dim_datetime.index
    dim_datetime = dim_datetime[['datetime_id', 'tpep_pickup_datetime', 'pickup_hour', 'pickup_day', 'pickup_week', 'pickup_weekday', 'pickup_month', 'pickup_year',
                             'tpep_dropoff_datetime', 'dropoff_hour', 'dropoff_day','dropoff_week', 'dropoff_weekday', 'dropoff_month', 'dropoff_year']]

    dim_pickup_location = df[['pickup_latitude','pickup_longitude']].reset_index(drop=True)
    dim_pickup_location['pickup_location_id'] = dim_pickup_location.index
    dim_pickup_location = dim_pickup_location[['pickup_location_id','pickup_latitude','pickup_longitude']]                         

    dim_dropoff_location = df[['dropoff_latitude','dropoff_longitude']].reset_index(drop=True)
    dim_dropoff_location['dropoff_location_id'] = dim_dropoff_location.index
    dim_dropoff_location = dim_dropoff_location[['dropoff_location_id','dropoff_latitude','dropoff_longitude']]

    payment_type_name = {
       1:"Credit card",
       2:"Cash",
       3:"No charge",
       4:"Dispute",
       5:"Unknown",
       6:"Voided trip"
    }

    dim_payment_type = df[['payment_type']].reset_index(drop=True)
    dim_payment_type['payment_type_id'] = dim_payment_type.index
    dim_payment_type['payment_type_name'] = dim_payment_type['payment_type'].map(payment_type_name)
    dim_payment_type = dim_payment_type[['payment_type_id','payment_type','payment_type_name']]
    
    rate_code_type = {
        1:"Standard rate",
        2:"JFK",
        3:"Newark",
        4:"Nassau or Westchester",
        5:"Negotiated fare",
        6:"Group ride"
    }

    dim_rate_code = df[['RatecodeID']].reset_index(drop=True)
    dim_rate_code['rate_code_id'] = dim_rate_code.index
    dim_rate_code['Rate_code_type'] = dim_rate_code['RatecodeID'].map(rate_code_type)
    dim_rate_code = dim_rate_code[['rate_code_id','RatecodeID','Rate_code_type']]
    
    vendor_type_name = {
    1:"Creative Mobile Technologies",
    2:"VeriFone Inc"

}

    dim_vendor_type = df[['VendorID']].reset_index(drop=True)
    dim_vendor_type['vendor_type_id'] = dim_vendor_type.index
    dim_vendor_type['vendor_name'] = dim_vendor_type['VendorID'].map(vendor_type_name)
    dim_vendor_type = dim_vendor_type[['vendor_type_id','VendorID','vendor_name']]


    fact_table = df.merge(dim_rate_code, left_on='trip_id', right_on='rate_code_id') \
             .merge(dim_pickup_location, left_on='trip_id', right_on='pickup_location_id') \
             .merge(dim_dropoff_location, left_on='trip_id', right_on='dropoff_location_id')\
             .merge(dim_datetime, left_on='trip_id', right_on='datetime_id') \
             .merge(dim_payment_type, left_on='trip_id', right_on='payment_type_id') \
             .merge(dim_vendor_type, left_on='trip_id', right_on='vendor_type_id') \
             [['trip_id','vendor_type_id', 'datetime_id', 'rate_code_id', 'pickup_location_id', 'dropoff_location_id',
               'store_and_fwd_flag', 'passenger_count', 'trip_distance', 'payment_type_id', 'fare_amount', 'extra', 
               'mta_tax', 'tip_amount', 'tolls_amount','improvement_surcharge', 'total_amount']]
               
    
    return {"dim_datetime":dim_datetime.to_dict(orient="dict"),
    "dim_rate_code":dim_rate_code.to_dict(orient="dict"),
    "dim_pickup_location":dim_pickup_location.to_dict(orient="dict"),
    "dim_dropoff_location":dim_dropoff_location.to_dict(orient="dict"),
    "dim_payment_type":dim_payment_type.to_dict(orient="dict"),
    "dim_vendor_type":dim_vendor_type.to_dict(orient="dict"),
    "fact_table":fact_table.to_dict(orient="dict")}


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
